package com.rkb.strings;
/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
 * @author ramkrishnabhattarai
 *
 */

public class RemovedPalinSubsequence {
	public int removePalindromeSub(String s) {
	    
	    if(s.length() == 0) return 0;
	    if(s.length() == 1) return 1;
	    
	    boolean isPalin = true;
	    
	    for(int i=0; i<s.length()/2; i++){
	        if(s.charAt(i) != s.charAt(s.length() - i -1)){
	            isPalin = false;
	            break;
	        }
	    }
	    
	    if(isPalin) return 1;
	    else return 2;
	    
	}
	
	// approach21
	public int removePalindromeSub2(String s) {
        if(s != null && s.length() > 0) {
            for(int i=0,j=s.length()-1; i<=j; i++, j--){
                if(s.charAt(i) != s.charAt(j)) {
                    return 2;
                }
            }
            return 1;
        } else {
            return 0;
        }
    }

}
